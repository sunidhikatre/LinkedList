Initialize a temp pointer at the head of the list.
Traverse the list while checking if the current node's value equals x.
If the node's value is x, adjust pointers to delete it by linking the previous and next nodes.
Special case: If the node is the head, update the head pointer.
Continue traversing to delete all occurrences of x and return the modified list.

class Solution {
    static Node deleteAllOccurOfX(Node head, int x) {
        // Write your code here
        Node temp = head;
        
        while(temp != null) {
            if(temp.data == x) {
                if(temp == head) {
                    head = head.next;
                } 
                Node nextNode = temp.next;
                Node prevNode = temp.prev;
                
                if(nextNode != null) {
                    nextNode.prev= prevNode;
                }
                if(prevNode != null) {
                    prevNode.next = nextNode;
                }
                temp = nextNode;
                
            } else {
                temp =temp.next;
            }
        }
        return head;
    }
}

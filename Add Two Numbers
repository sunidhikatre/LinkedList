You are given two non-empty linked lists representing two non-negative integers.
The digits are stored in reverse order, and each of their nodes contains a single digit.
Add the two numbers and return the sum as a linked list.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(-1);
        ListNode current = dummy;
        ListNode temp1 = l1;
        ListNode temp2 = l2;
        int carry = 0;
        int sum =0;

        while(temp1 != null || temp2 != null) {
            sum = carry;
            if(temp1!=null){
                sum += temp1.val;
                temp1 = temp1.next;
            }
            
            if(temp2 != null) {
                sum += temp2.val;
                temp2 = temp2.next;
            }
            
            ListNode newNode = new ListNode(sum%10);
            carry = sum/10;

            current.next = newNode;
            current = current.next;
        }
         if (carry > 0) {
            current.next = new ListNode(carry);
        }

        return dummy.next;
    }
}

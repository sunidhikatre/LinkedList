Initialize two pointers, slow and fast, both starting at head.
Check if the head is null; if so, there’s no cycle, return false.
Move slow by one step and fast by two steps in each iteration.
If slow and fast meet at any point, a cycle exists, so return true.
If fast reaches the end (null), there’s no cycle, so return false.


public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        if(head == null) {
            return false;
        }

        while(fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast) {
                return true;
            }
        }
        return false;
    }
}

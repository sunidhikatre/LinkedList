Initialization: Set odd to the head of the list and even to head.next. Save the start of the even list (evenNode).
Iterate through the list: Continue iterating while even and even.next are not null (i.e., there are still even-indexed nodes).
Rearrange odd and even:
Update odd.next to skip the next node (moving to the next odd-indexed node).
Update even.next to skip the next node (moving to the next even-indexed node).
Update pointers: Move odd and even to their respective next nodes.
Connect odd and even lists: After the loop, link the last odd node to the start of the even list (odd.next = evenNode).


Note: odd pehle aata h even ke so even par while loop lga skte agar woh null h malab odd bhi null

class Solution {
    public ListNode oddEvenList(ListNode head) {
        ListNode odd = head;
        ListNode even = head.next;
        ListNode evenNode = head.next;

        while (even != null && even.next != null) {
            odd.next = odd.next.next;
            even.next = even.next.next;

            odd = odd.next;
            even = even.next;
        }

        odd.next=evenNode;

        return head;

    }
}

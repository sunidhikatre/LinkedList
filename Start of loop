Initialize two pointers, slow and fast, at the head of the list.
Move slow one step and fast two steps at a time to detect a cycle; if they meet, there is a cycle.
When slow and fast meet, reset slow to the head.
Move slow and fast one step at a time until they meet again.
The node where they meet is the start of the cycle. Return that node; if no cycle, return null.

public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        if(head == null || head.next == null) {
            return null;
        }

        while(fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast) {
                slow = head;
                if(slow == fast) {
                    return slow;
                }
     
                while(slow != null) {
                    slow = slow.next;
                    fast = fast.next;
            
                    if(slow == fast)
                    {
                       return slow;
                    }
                }              
            }
        }
        return null;
     
       
    }
}

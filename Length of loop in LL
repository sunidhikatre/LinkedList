Initialize two pointers, slow and fast, both starting at head.
Move slow by one step and fast by two steps in each iteration to detect a cycle.
If slow and fast meet, set sameNode to slow and break, indicating a cycle is present.
Starting from sameNode, traverse the cycle to count the number of nodes until you loop back to sameNode.
Return the count of nodes in the loop (or 0 if no cycle was found).

class Solution {
    // Function to find the length of a loop in the linked list.
    public int countNodesinLoop(Node head) {
        Node slow = head;
        Node fast = head;
        Node sameNode = null;
        int l1 = 0;
        if(head == null) {
            return 0;
        }

        while(fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast) {
               sameNode = slow; 
               break;
            }
        }
       // System.out.println(sameNode.data);
        Node start = sameNode;
        while(start != null) {
            start = start.next;
            l1++;
            if(start == sameNode){
                return l1;
            }
        }
        return 0;
    }
    
}

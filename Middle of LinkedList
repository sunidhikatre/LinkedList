Initialize two pointers, slow and fast, both starting at the head.
Count the length of the list by traversing head to determine if it's even or odd.
Move slow one step and fast two steps until fast reaches the end or near the end.
If the list length (l1) is even, slow.next is the middle node; otherwise, slow itself is the middle node.
Return the appropriate node based on the list length check.


class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;

        int l1 = 0;
      
        while(head != null){
            l1++;
            head = head.next;
        }

        while(fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
       
        if(l1 % 2 == 0){
            return slow.next;
        }   
        else {
            return slow;
        }
    }
}
